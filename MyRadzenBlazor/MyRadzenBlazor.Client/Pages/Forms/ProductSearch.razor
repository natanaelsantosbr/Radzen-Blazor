@page "/product-search"
@using System.Linq
@inject NotificationService NotificationService
@inject DialogService DialogService

@functions {
    public class Product
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Category { get; set; }
        public decimal Price { get; set; }
    }

    List<Product> products;
    List<Product> filteredProducts;
    string searchTerm;
    Product selectedProduct;

    protected override void OnInitialized()
    {
        // Mock data
        products = new List<Product>
        {
            new Product { Id = 1, Name = "Laptop", Category = "Electronics", Price = 999.99M },
            new Product { Id = 2, Name = "Smartphone", Category = "Electronics", Price = 699.99M },
            new Product { Id = 3, Name = "Tablet", Category = "Electronics", Price = 399.99M },
            new Product { Id = 4, Name = "Headphones", Category = "Accessories", Price = 199.99M },
            new Product { Id = 5, Name = "Monitor", Category = "Electronics", Price = 299.99M },
            new Product { Id = 6, Name = "Mouse", Category = "Accessories", Price = 49.99M },
        };

        filteredProducts = products;
    }

    void Search()
    {
        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                                   p.Category.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }
    }

    void EditProduct(Product product)
    {
        selectedProduct = new Product
            {
                Id = product.Id,
                Name = product.Name,
                Category = product.Category,
                Price = product.Price
            };

        DialogService.Open<EditProductDialog>("Edit Product", new Dictionary<string, object>
        {
            { "Product", selectedProduct },
            { "OnSave", EventCallback.Factory.Create<Product>(this, SaveProduct) }
        }, new DialogOptions() { Width = "500px", Height = "400px" });
    }

    void SaveProduct(Product updatedProduct)
    {
        var product = products.FirstOrDefault(p => p.Id == updatedProduct.Id);
        if (product != null)
        {
            product.Name = updatedProduct.Name;
            product.Category = updatedProduct.Category;
            product.Price = updatedProduct.Price;
        }
        NotificationService.Notify(new NotificationMessage { Severity = NotificationSeverity.Success, Summary = "Product Saved", Detail = $"Product {updatedProduct.Name} has been updated." });
    }
}

<RadzenCard>
    <RadzenRow>
        <RadzenColumn Size="12" SizeMD="4">
            <RadzenTextBox Placeholder="Search..." @bind-Value="searchTerm" Style="width: 100%;" />
        </RadzenColumn>
        <RadzenColumn Size="12" SizeMD="2">
            <RadzenButton Text="Search" Icon="search" Click="@(args => Search())" Style="width: 100%;" />
        </RadzenColumn>
    </RadzenRow>
    <RadzenGrid Data="@filteredProducts" TItem="Product" Style="margin-top: 1rem;">
        <Columns>
            <RadzenGridColumn TItem="Product" Property="Id" Title="ID" />
            <RadzenGridColumn TItem="Product" Property="Name" Title="Name" />
            <RadzenGridColumn TItem="Product" Property="Category" Title="Category" />
            <RadzenGridColumn TItem="Product" Property="Price" Title="Price" FormatString="C" />
            <RadzenGridColumn TItem="Product" Title="Actions">
                <Template Context="product">
                    <RadzenButton Text="Edit" Icon="edit" Click="@(args => EditProduct(product))" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
</RadzenCard>
