@page "/clients"
@inject ClientService _clientService
@inject DialogService DialogService
@inject NotificationService NotificationService

<RadzenGrid PageSize="5" AllowPaging="true" AllowSorting="true" Data="@clients" TItem="ClientRequest" Style="margin-top: 1rem;">
    <Columns>
        <RadzenGridColumn TItem="ClientRequest" Property="Id" Title="ID" />
        <RadzenGridColumn TItem="ClientRequest" Property="Name" Title="Name" />
        <RadzenGridColumn TItem="ClientRequest" Property="Email" Title="Email" />
        <RadzenGridColumn TItem="ClientRequest" Property="Phone" Title="Phone" />
        <RadzenGridColumn TItem="ClientRequest" Title="Actions">
            <Template Context="client">
                <RadzenButton Text="Edit" Icon="edit" Click="@(args => EditClient(client))" Style="margin-right: 0.5rem;" />
                <RadzenButton Text="Delete" Icon="delete" Click="@(args => ConfirmDelete(client))" ButtonStyle="ButtonStyle.Danger" />
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>

<RadzenButton Text="Add Client" Icon="add_circle" Click="@(args => AddClient())" Style="margin-top: 1rem;" />

@code {
    private List<ClientRequest> clients;

    protected override async Task OnInitializedAsync()
    {
        await ReloadClients();
    }

    private async Task ReloadClients()
    {
        clients = await _clientService.GetClients();
        StateHasChanged();
    }

    private async Task AddClient()
    {
        var result = await DialogService.OpenAsync<ClientForm>("Add Client", new Dictionary<string, object>(), new DialogOptions() { Width = "700px", Height = "400px" });
        if (result == true)
        {
            await ReloadClients();
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Client added successfully");
        }
    }

    private async Task EditClient(ClientRequest client)
    {
        var result = await DialogService.OpenAsync<ClientForm>("Edit Client", new Dictionary<string, object> { { "Client", client } }, new DialogOptions() { Width = "700px", Height = "400px" });
        if (result == true)
        {
            await ReloadClients();
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Client updated successfully");
        }
    }

    private async Task ConfirmDelete(ClientRequest client)
    {
        bool? result = await DialogService.Confirm("Are you sure you want to delete this client?", "Delete Client", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (result == true)
        {
            await _clientService.DeleteClient(client.Id);
            await ReloadClients();
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Client deleted successfully");
        }
    }
}
