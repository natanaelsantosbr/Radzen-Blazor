@page "/clients"
@inject ClientService _clientService
@inject DialogService DialogService
@inject NotificationService NotificationService
@inject TooltipService tooltipService
<PageTitle>Clientes</PageTitle>

<RadzenRow JustifyContent="JustifyContent.SpaceBetween" AlignItems="AlignItems.Center">
    <RadzenColumn Size="8">
        <RadzenText TextStyle="TextStyle.DisplayH5">Lista de Clientes</RadzenText>
        <RadzenText TextStyle="TextStyle.Body1" TextAlign="TextAlign.Left">Veja os clientes que estão na sua base de dados</RadzenText>
    </RadzenColumn>
    <RadzenColumn Size="4" class="rz-text-align-end">
        <RadzenButton Size="ButtonSize.Large" Icon="add_circle" Click="@(args => AddClient())" MouseEnter="@(args => ShowTooltip(args, "Clique para adicionar um novo cliente") )" />
        <RadzenButton Size="ButtonSize.Large" Icon="filter_alt" Click="@OpenSideDialog"/>
    </RadzenColumn>
</RadzenRow>



<RadzenGrid @ref="grid"  PageSize="5" AllowPaging="true" AllowSorting="true" Data="@clients" TItem="ClientRequest" Count="@totalClients" LoadData="@LoadData" Style="margin-top: 1rem;">
    <Columns>
        <RadzenGridColumn TItem="ClientRequest" Property="Id" Title="ID" />
        <RadzenGridColumn TItem="ClientRequest" Property="Name" Title="Name" />
        <RadzenGridColumn TItem="ClientRequest" Property="Email" Title="Email" />
        <RadzenGridColumn TItem="ClientRequest" Property="Phone" Title="Phone" />
        <RadzenGridColumn TItem="ClientRequest" Title="Actions">
            <Template Context="client">
<RadzenButton 
    Icon="edit" 
    Click="@(args => EditClient(client))" 
    Style="margin-right: 0.5rem;"  
    MouseEnter="@(args => ShowTooltip(args, $"Clique para editar os detalhes do cliente '{client.Name}'") )"  
/>
<RadzenButton 
    Icon="delete" 
    Click="@(args => ConfirmDelete(client))" 
    ButtonStyle="ButtonStyle.Danger" 
    MouseEnter="@(args => ShowTooltip(args, $"Clique para remover o cliente '{client.Name}' da base de dados") )" 
/>
            </Template>
        </RadzenGridColumn>
    </Columns>
</RadzenGrid>



@code {
    void ShowTooltip(ElementReference elementReference, string message, TooltipOptions options = null) => tooltipService.Open(elementReference, message, options);
    
    
    private async Task OpenSideDialog()
    {
        var options = new SideDialogOptions
        {
            CloseDialogOnOverlayClick = true,
            Position = DialogPosition.Right,
            ShowMask = true
        };

        await DialogService.OpenSideAsync<ClientFilterDialog>("Filter", new Dictionary<string, object>
        {
            { "SearchModel", searchModel },
            { "OnSearch", EventCallback.Factory.Create(this, SearchClients) }
        }, options);
    }

    private List<ClientRequest> clients;
    private int totalClients;
    private SearchModel searchModel = new SearchModel();
    private RadzenGrid<ClientRequest> grid;

    private void ReloadGrid()
    {
        grid.GoToPage(0); // Voltar para a primeira página
        grid.Reload(); // Recarregar os dados do grid
    }

    protected override async Task OnInitializedAsync()
    {

    }

    private async Task LoadData(Radzen.LoadDataArgs args)
    {
        var pageIndex = args.Skip / args.Top ?? 0;
        var pageSize = args.Top ?? 5;
        var result = await _clientService.GetClients(pageIndex, pageSize, searchModel.Name, searchModel.Email);

        clients = result.Data;
        totalClients = result.TotalCount;
    }

    private async Task SearchClients()
    {
        await LoadData(new Radzen.LoadDataArgs { Skip = 0, Top = 5 });
    }

    private void ClearSearch()
    {
        searchModel = new SearchModel();
        StateHasChanged();
    }

    private async Task AddClient()
    {
        var result = await DialogService.OpenAsync<ClientForm>("Add Client", new Dictionary<string, object>(), new DialogOptions() { Width = "700px", Height = "400px" });
        if (result == true)
        {
            await LoadData(new Radzen.LoadDataArgs { Skip = 0, Top = 5 });
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Client added successfully");
        }
    }

    private async Task EditClient(ClientRequest client)
    {
        var result = await DialogService.OpenAsync<ClientForm>("Edit Client", new Dictionary<string, object> { { "Client", client } }, new DialogOptions() { Width = "700px", Height = "400px" });
        if (result == true)
        {
            await LoadData(new Radzen.LoadDataArgs { Skip = 0, Top = 5 });
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Client updated successfully");
            ReloadGrid();
        }
    }

    private async Task ConfirmDelete(ClientRequest client)
    {
        bool? result = await DialogService.Confirm("Are you sure you want to delete this client?", "Delete Client", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (result == true)
        {
            await _clientService.DeleteClient(client.Id);
            await LoadData(new Radzen.LoadDataArgs { Skip = 0, Top = 5 });
            NotificationService.Notify(NotificationSeverity.Success, "Success", "Client deleted successfully");
        }
    }
}
